// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Person.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Person TABLE
class TablePerson extends SqfEntityTableBase {
  TablePerson() {
    // declare properties of EntityTable
    tableName = 'person';
    primaryKeyName = 'uid';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('lastName', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('cellphone', DbType.text),
      SqfEntityFieldBase('photoUrl', DbType.text),
      SqfEntityFieldBase('dateOfBirth', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('dataPlayer', DbType.text),
      SqfEntityFieldBase('physicalinfo', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePerson();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class TeamSoccerDB extends SqfEntityModelProvider {
  TeamSoccerDB() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TablePerson.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Person
class Person extends TableBase {
  Person(
      {this.uid,
      this.name,
      this.lastName,
      this.email,
      this.cellphone,
      this.photoUrl,
      this.dateOfBirth,
      this.dataPlayer,
      this.physicalinfo,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Person.withFields(
      this.uid,
      this.name,
      this.lastName,
      this.email,
      this.cellphone,
      this.photoUrl,
      this.dateOfBirth,
      this.dataPlayer,
      this.physicalinfo,
      this.isDeleted) {
    _setDefaultValues();
  }
  Person.withId(
      this.uid,
      this.name,
      this.lastName,
      this.email,
      this.cellphone,
      this.photoUrl,
      this.dateOfBirth,
      this.dataPlayer,
      this.physicalinfo,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Person.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    uid = o['uid'].toString();
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['lastName'] != null) {
      lastName = o['lastName'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['cellphone'] != null) {
      cellphone = o['cellphone'].toString();
    }
    if (o['photoUrl'] != null) {
      photoUrl = o['photoUrl'].toString();
    }
    if (o['dateOfBirth'] != null) {
      dateOfBirth = int.tryParse(o['dateOfBirth'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateOfBirth'].toString())!)
          : DateTime.tryParse(o['dateOfBirth'].toString());
    }
    if (o['dataPlayer'] != null) {
      dataPlayer = o['dataPlayer'].toString();
    }
    if (o['physicalinfo'] != null) {
      physicalinfo = o['physicalinfo'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Person)
  String? uid;
  String? name;
  String? lastName;
  String? email;
  String? cellphone;
  String? photoUrl;
  DateTime? dateOfBirth;
  String? dataPlayer;
  String? physicalinfo;
  bool? isDeleted;
  bool? isSaved;
  // end FIELDS (Person)

  static const bool _softDeleteActivated = true;
  PersonManager? __mnPerson;

  PersonManager get _mnPerson {
    return __mnPerson = __mnPerson ?? PersonManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['uid'] = uid;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (lastName != null || !forView) {
      map['lastName'] = lastName;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (cellphone != null || !forView) {
      map['cellphone'] = cellphone;
    }
    if (photoUrl != null || !forView) {
      map['photoUrl'] = photoUrl;
    }
    if (dateOfBirth != null) {
      map['dateOfBirth'] = forJson
          ? dateOfBirth!.toString()
          : forQuery
              ? dateOfBirth!.millisecondsSinceEpoch
              : dateOfBirth;
    } else if (dateOfBirth != null || !forView) {
      map['dateOfBirth'] = null;
    }
    if (dataPlayer != null || !forView) {
      map['dataPlayer'] = dataPlayer;
    }
    if (physicalinfo != null || !forView) {
      map['physicalinfo'] = physicalinfo;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['uid'] = uid;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (lastName != null || !forView) {
      map['lastName'] = lastName;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (cellphone != null || !forView) {
      map['cellphone'] = cellphone;
    }
    if (photoUrl != null || !forView) {
      map['photoUrl'] = photoUrl;
    }
    if (dateOfBirth != null) {
      map['dateOfBirth'] = forJson
          ? dateOfBirth!.toString()
          : forQuery
              ? dateOfBirth!.millisecondsSinceEpoch
              : dateOfBirth;
    } else if (dateOfBirth != null || !forView) {
      map['dateOfBirth'] = null;
    }
    if (dataPlayer != null || !forView) {
      map['dataPlayer'] = dataPlayer;
    }
    if (physicalinfo != null || !forView) {
      map['physicalinfo'] = physicalinfo;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Person]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Person]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      uid,
      name,
      lastName,
      email,
      cellphone,
      photoUrl,
      dateOfBirth != null ? dateOfBirth!.millisecondsSinceEpoch : null,
      dataPlayer,
      physicalinfo,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      uid,
      name,
      lastName,
      email,
      cellphone,
      photoUrl,
      dateOfBirth != null ? dateOfBirth!.millisecondsSinceEpoch : null,
      dataPlayer,
      physicalinfo,
      isDeleted
    ];
  }

  static Future<List<Person>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Person.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Person>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Person>[];
    try {
      objList = list
          .map((person) => Person.fromMap(person as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Person.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Person>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Person> objList = <Person>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Person.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Person by ID if exist, otherwise returns null
  /// Primary Keys: String? uid
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Person] if exist, otherwise returns null
  Future<Person?> getById(String? uid,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (uid == null) {
      return null;
    }
    Person? obj;
    final data = await _mnPerson.getById([uid]);
    if (data.length != 0) {
      obj = Person.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Person) object. If the Primary Key (uid) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same uid
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnPerson.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO person (uid, name, lastName, email, cellphone, photoUrl, dateOfBirth, dataPlayer, physicalinfo,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<Person> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Person> persons) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await TeamSoccerDB().batchStart();
    for (final obj in persons) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await TeamSoccerDB().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnPerson.rawInsert(
          'INSERT OR REPLACE INTO person (uid, name, lastName, email, cellphone, photoUrl, dateOfBirth, dataPlayer, physicalinfo,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            uid,
            name,
            lastName,
            email,
            cellphone,
            photoUrl,
            dateOfBirth != null ? dateOfBirth!.millisecondsSinceEpoch : null,
            dataPlayer,
            physicalinfo,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Person uid=$uid updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Person uid=$uid did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Person Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Person

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Person invoked (uid=$uid)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnPerson
          .delete(QueryParams(whereString: 'uid=?', whereArguments: [uid]));
    } else {
      return _mnPerson.updateBatch(
          QueryParams(whereString: 'uid=?', whereArguments: [uid]),
          {'isDeleted': 1});
    }
  }

  /// Recover Person

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Person invoked (uid=$uid)');
    {
      return _mnPerson.updateBatch(
          QueryParams(whereString: 'uid=?', whereArguments: [uid]),
          {'isDeleted': 0});
    }
  }

  @override
  PersonFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PersonFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  PersonFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PersonFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      uid = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion person

// region PersonField
class PersonField extends FilterBase {
  PersonField(PersonFilterBuilder personFB) : super(personFB);

  @override
  PersonFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder isNull() {
    return super.isNull() as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as PersonFilterBuilder;
  }

  @override
  PersonFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as PersonFilterBuilder;
  }

  @override
  PersonField get not {
    return super.not as PersonField;
  }
}
// endregion PersonField

// region PersonFilterBuilder
class PersonFilterBuilder extends ConjunctionBase {
  PersonFilterBuilder(Person obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnPerson = obj._mnPerson;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  PersonManager? _mnPerson;

  /// put the sql keyword 'AND'
  @override
  PersonFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  PersonFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  PersonFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  PersonFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  PersonFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  PersonFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  PersonFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PersonFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PersonFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PersonFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PersonFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  PersonField _setField(PersonField? field, String colName, DbType dbtype) {
    return PersonField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  PersonField? _uid;
  PersonField get uid {
    return _uid = _setField(_uid, 'uid', DbType.integer);
  }

  PersonField? _name;
  PersonField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  PersonField? _lastName;
  PersonField get lastName {
    return _lastName = _setField(_lastName, 'lastName', DbType.text);
  }

  PersonField? _email;
  PersonField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  PersonField? _cellphone;
  PersonField get cellphone {
    return _cellphone = _setField(_cellphone, 'cellphone', DbType.text);
  }

  PersonField? _photoUrl;
  PersonField get photoUrl {
    return _photoUrl = _setField(_photoUrl, 'photoUrl', DbType.text);
  }

  PersonField? _dateOfBirth;
  PersonField get dateOfBirth {
    return _dateOfBirth =
        _setField(_dateOfBirth, 'dateOfBirth', DbType.datetime);
  }

  PersonField? _dataPlayer;
  PersonField get dataPlayer {
    return _dataPlayer = _setField(_dataPlayer, 'dataPlayer', DbType.text);
  }

  PersonField? _physicalinfo;
  PersonField get physicalinfo {
    return _physicalinfo =
        _setField(_physicalinfo, 'physicalinfo', DbType.text);
  }

  PersonField? _isDeleted;
  PersonField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Person> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnPerson!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnPerson!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Person> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Person bulk invoked');
    return _mnPerson!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'uid IN (SELECT uid from person ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnPerson!.updateBatch(qparams, values);
  }

  /// This method always returns [Person] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Person?
  @override
  Future<Person?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnPerson!.toList(qparams);
    final data = await objFuture;
    Person? obj;
    if (data.isNotEmpty) {
      obj = Person.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Person]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Person?
  @override
  Future<Person> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Person();
  }

  /// This method returns int. [Person]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? personCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final personsFuture = await _mnPerson!.toList(qparams);
    final int count = personsFuture[0]['CNT'] as int;
    if (personCount != null) {
      personCount(count);
    }
    return count;
  }

  /// This method returns List<Person> [Person]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Person>
  @override
  Future<List<Person>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Person> personsData = await Person.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return personsData;
  }

  /// This method returns Json String [Person]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Person]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Person]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnPerson!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Person]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `uid` FROM person WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> uidData = <String>[];
    qparams.selectColumns = ['uid'];
    final uidFuture = await _mnPerson!.toList(qparams);

    final int count = uidFuture.length;
    for (int i = 0; i < count; i++) {
      uidData.add(uidFuture[i]['uid'] as String);
    }
    return uidData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Person]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnPerson!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Person.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnPerson!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PersonFilterBuilder

// region PersonFields
class PersonFields {
  static TableField? _fUid;
  static TableField get uid {
    return _fUid = _fUid ?? SqlSyntax.setField(_fUid, 'uid', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fLastName;
  static TableField get lastName {
    return _fLastName =
        _fLastName ?? SqlSyntax.setField(_fLastName, 'lastName', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fCellphone;
  static TableField get cellphone {
    return _fCellphone = _fCellphone ??
        SqlSyntax.setField(_fCellphone, 'cellphone', DbType.text);
  }

  static TableField? _fPhotoUrl;
  static TableField get photoUrl {
    return _fPhotoUrl =
        _fPhotoUrl ?? SqlSyntax.setField(_fPhotoUrl, 'photoUrl', DbType.text);
  }

  static TableField? _fDateOfBirth;
  static TableField get dateOfBirth {
    return _fDateOfBirth = _fDateOfBirth ??
        SqlSyntax.setField(_fDateOfBirth, 'dateOfBirth', DbType.datetime);
  }

  static TableField? _fDataPlayer;
  static TableField get dataPlayer {
    return _fDataPlayer = _fDataPlayer ??
        SqlSyntax.setField(_fDataPlayer, 'dataPlayer', DbType.text);
  }

  static TableField? _fPhysicalinfo;
  static TableField get physicalinfo {
    return _fPhysicalinfo = _fPhysicalinfo ??
        SqlSyntax.setField(_fPhysicalinfo, 'physicalinfo', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion PersonFields

//region PersonManager
class PersonManager extends SqfEntityProvider {
  PersonManager()
      : super(TeamSoccerDB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'person';
  static const List<String> _primaryKeyList = ['uid'];
  static const String _whereStr = 'uid=?';
}

//endregion PersonManager
class TeamSoccerDBSequenceManager extends SqfEntityProvider {
  TeamSoccerDBSequenceManager() : super(TeamSoccerDB());
}
// END OF ENTITIES
